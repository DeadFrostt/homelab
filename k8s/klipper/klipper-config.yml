apiVersion: v1
kind: ConfigMap
metadata:
  name: klipper-config
  namespace: klipper
data:
  printer.cfg: |
    [stepper_x]
    step_pin: PC2
    dir_pin: !PB9
    enable_pin: !PC3
    microsteps: 16
    rotation_distance: 40
    endstop_pin: ~!PA5
    position_endstop: -6
    position_min: -6
    position_max: 230
    homing_speed: 80

    [tmc2208 stepper_x]
    uart_pin: PB12
    run_current: 0.60
    #hold_current: 0.5
    sense_resistor: 0.150
    #stealthchop_threshold: 999999
    interpolate: True

    [stepper_y]
    step_pin: PB8
    dir_pin: PB7
    enable_pin: !PC3
    microsteps: 16
    rotation_distance: 40
    endstop_pin: ~!PA6
    position_endstop: -14
    position_min: -14
    position_max: 230
    homing_speed: 80

    [tmc2208 stepper_y]
    uart_pin: PB13
    run_current: 0.60
    #hold_current: 0.5
    sense_resistor: 0.150
    #stealthchop_threshold: 999999
    interpolate: True

    [stepper_z]
    step_pin: PB6
    dir_pin: !PB5
    enable_pin: !PC3
    microsteps: 16
    rotation_distance: 8
    endstop_pin: probe:z_virtual_endstop
    position_min: -3
    position_max: 250
    homing_speed: 4
    second_homing_speed: 1
    homing_retract_dist: 2.0

    [tmc2208 stepper_z]
    uart_pin: PB14
    run_current: 0.8
    #hold_current: 0.5
    sense_resistor: 0.150
    #stealthchop_threshold: 999999
    interpolate: True

    [extruder]
    max_extrude_only_distance: 100.0
    step_pin: PB4
    dir_pin: PB3
    enable_pin: !PC3
    microsteps: 16
    rotation_distance: 7.44
    nozzle_diameter: 0.400
    filament_diameter: 1.750
    heater_pin: PA1
    sensor_type: EPCOS 100K B57560G104F
    sensor_pin: PC5
    control: pid
    # tuned for stock hardware with 200 degree Celsius target
    pid_Kp: 27.142
    pid_Ki: 1.371
    pid_Kd: 134.351
    min_temp: 0
    max_temp: 260

    [heater_bed]
    heater_pin: PB2
    sensor_type: EPCOS 100K B57560G104F
    sensor_pin: PC4
    control: pid
    # tuned for stock hardware with 70 degree Celsius target
    pid_kp: 66.371
    pid_ki: 0.846
    pid_kd: 1301.702
    min_temp: 0
    max_temp: 100

    [heater_fan hotend_fan]
    pin: PC1

    [fan]
    pin: PA0

    [mcu]
    serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
    restart_method: command

    [printer]
    kinematics: cartesian
    max_velocity: 250
    max_accel: 2500
    max_z_velocity: 5
    square_corner_velocity: 5.0
    max_z_accel: 100

    [bltouch]
    sensor_pin: ^PC14
    control_pin: PC13
    x_offset: -23.0
    y_offset: -14.5
    z_offset: 1.029
    speed: 20
    pin_move_time: 0.4
    stow_on_each_sample: False
    probe_with_touch_mode: True

    [safe_z_home]
    home_xy_position: 134,123
    speed: 150
    z_hop: 10
    z_hop_speed: 10

    [bed_mesh]
    speed: 120
    horizontal_move_z: 5
    mesh_min: 30,30         # Need to handle head distance with cr-touch (bl_touch)
    mesh_max: 207,215.5     # Max probe range (230-23,230-14.5)
    probe_count: 5,5
    algorithm: bicubic

    [output_pin beeper]
    pin: PB0

    [screws_tilt_adjust]
    screw1: 54.5, 45.5
    screw1_name: front left screw
    screw2: 224.5, 45.5
    screw2_name: front right screw
    screw3: 224.5, 215.5
    screw3_name: rear right screw
    screw4: 54.5, 215.5
    screw4_name: rear left screw
    horizontal_move_z: 10.
    speed: 50.
    screw_thread: CCW-M4

    [filter]

    [dirzctl]

    [hx711s]
    sensor0_clk_pin: PA4             # Pressure detection clock pin
    sensor0_sdo_pin: PC6             # Pressure detection data pin

    [prtouch]
    sensor_x: 32
    sensor_y: 30
    clr_noz_start_x: 15
    clr_noz_start_y: 25
    clr_noz_len_y: 15
    s_hot_min_temp: 160
    s_hot_max_temp: 200
    s_bed_max_temp: 60
    show_msg: True
    wipe_retract_distance: 2

    [e3v3se_display]
    language: english
    logging: True

    [include mainsail.cfg]
  mainsail.cfg: "[virtual_sdcard]\npath: /opt/printer_data/gcodes\non_error_gcode: CANCEL_PRINT\n#magic___^_^___line\n[pause_resume]\n#recover_velocity: 50.\n#   When capture/restore is enabled, the speed at which to return to\n#   the captured position (in mm/s). Default is 50.0 mm/s.\n#magic___^_^___line\n[display_status]\n#magic___^_^___line\n[respond]\n#magic___^_^___line\n[gcode_macro CANCEL_PRINT]\ndescription: Cancel the actual running print\nrename_existing: CANCEL_PRINT_BASE\ngcode:\n  ##### get user parameters or use default #####\n  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}\n  {% set retract = client.cancel_retract|default(5.0)|abs %}\n  ##### define park position #####\n  {% set park_x = \"\" if (client.park_at_cancel_x|default(none) is none)\n            else \"X=\" ~ client.park_at_cancel_x %}\n  {% set park_y = \"\" if (client.park_at_cancel_y|default(none) is none)\n            else \"Y=\" ~ client.park_at_cancel_y %}\n  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n  ##### end of definitions #####\n  # restore idle_timeout time if needed\n  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}\n    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}\n  {% endif %}\n  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n  _CLIENT_RETRACT LENGTH={retract}\n  TURN_OFF_HEATERS\n  M106 S0\n  {client.user_cancel_macro|default(\"\")}\n  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n  # clear pause_next_layer and pause_at_layer as preparation for next print\n  SET_PAUSE_NEXT_LAYER ENABLE=0\n  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\n  CANCEL_PRINT_BASE\n            #magic___^_^___line\n[gcode_macro PAUSE]\ndescription: Pause the actual running print\nrename_existing: PAUSE_BASE\ngcode:\n  ##### get user parameters or use default ##### \n  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n  {% set idle_timeout = client.idle_timeout|default(0) %}\n  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}\n  {% set restore = False if printer.toolhead.extruder == ''\n              else True  if params.RESTORE|default(1)|int == 1 else False %}\n  ##### end of definitions #####\n  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE=\"{{'restore': restore, 'temp': temp}}\"\n  # set a new idle_timeout value\n  {% if idle_timeout > 0 %}\n    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\n    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n  {% endif %}\n  PAUSE_BASE\n  {client.user_pause_macro|default(\"\")}\n  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}\n              #magic___^_^___line\n[gcode_macro RESUME]\ndescription: Resume the actual running print\nrename_existing: RESUME_BASE\nvariable_last_extruder_temp: {'restore': False, 'temp': 0}\nvariable_restore_idle_timeout: 0\nvariable_idle_state: False\ngcode:\n  ##### get user parameters or use default #####\n  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n  {% set sp_move = client.speed_move|default(velocity) %}\n  {% set runout_resume = True if client.runout_sensor|default(\"\") == \"\"     # no runout\n                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled\n                    else printer[client.runout_sensor].filament_detected %} # sensor status\n  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config\n                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder\n  {% set do_resume = False %}\n  {% set prompt_txt = [] %}\n  ##### end of definitions #####\n  #### Printer comming from timeout idle state ####\n  {% if printer.idle_timeout.state|upper == \"IDLE\" or idle_state %}\n    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n    {% if last_extruder_temp.restore %}\n      # we need to use the unicode (\\u00B0) for the Â° as py2 env's would throw an error otherwise \n      RESPOND TYPE=echo MSG='{\"Restoring \\\"%s\\\" temperature to %3.1f\\u00B0C, this may take some time\" % (printer.toolhead.extruder, last_extruder_temp.temp) }'\n      M109 S{last_extruder_temp.temp}\n      {% set do_resume = True %}\n    {% elif can_extrude %}\n      {% set do_resume = True %}\n    {% else %} \n      RESPOND TYPE=error MSG='{\"Resume aborted !!! \\\"%s\\\" not hot enough, please heat up again and press RESUME\" % printer.toolhead.extruder}'\n      {% set _d = prompt_txt.append(\"\\\"%s\\\" not hot enough, please heat up again and press RESUME\" % printer.toolhead.extruder) %}\n    {% endif %}\n  #### Printer comming out of regular PAUSE state ####\n  {% elif can_extrude %}\n    {% set do_resume = True %}\n  {% else %}\n    RESPOND TYPE=error MSG='{\"Resume aborted !!! \\\"%s\\\" not hot enough, please heat up again and press RESUME\" % printer.toolhead.extruder}'\n    {% set _d = prompt_txt.append(\"\\\"%s\\\" not hot enough, please heat up again and press RESUME\" % printer.toolhead.extruder) %}\n  {% endif %}\n  {% if runout_resume %}\n    {% if do_resume %}\n      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time\n      {client.user_resume_macro|default(\"\")}\n      _CLIENT_EXTRUDE\n      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n    {% endif %}\n  {% else %}\n    RESPOND TYPE=error MSG='{\"Resume aborted !!! \\\"%s\\\" detects no filament, please load filament and press RESUME\" % (client.runout_sensor.split(\" \"))[1]}'\n    {% set _d = prompt_txt.append(\"\\\"%s\\\" detects no filament, please load filament and press RESUME\" % (client.runout_sensor.split(\" \"))[1]) %}\n  {% endif %}\n  ##### Generate User Information box in case of abort #####\n  {% if not (runout_resume and do_resume) %} \n    RESPOND TYPE=command MSG=\"action:prompt_begin RESUME aborted !!!\"\n    {% for element in prompt_txt %}\n      RESPOND TYPE=command MSG='{\"action:prompt_text %s\" % element}' \n    {% endfor %}\n    RESPOND TYPE=command MSG=\"action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info\"\n    RESPOND TYPE=command MSG=\"action:prompt_show\"\n  {% endif %}\n                    #magic___^_^___line\n# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]\n[gcode_macro SET_PAUSE_NEXT_LAYER]\ndescription: Enable a pause if the next layer is reached\ngcode:\n  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}\n  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\n  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE=\"{{ 'enable': ENABLE, 'call': MACRO }}\"\n                    #magic___^_^___line\n# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]\n[gcode_macro SET_PAUSE_AT_LAYER]\ndescription: Enable/disable a pause if a given layer number is reached\ngcode:\n  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}\n  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\n            else params.LAYER is defined %}\n  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\n  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE=\"{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}\"\n                    #magic___^_^___line\n# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]\n[gcode_macro SET_PRINT_STATS_INFO]\nrename_existing: SET_PRINT_STATS_INFO_BASE\ndescription: Overwrite, to get pause_next_layer and pause_at_layer feature\nvariable_pause_next_layer: { 'enable': False, 'call': \"PAUSE\" }\nvariable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': \"PAUSE\" }\ngcode:\n  {% if pause_next_layer.enable %}\n    RESPOND TYPE=echo MSG='{\"%s, forced by pause_next_layer\" % pause_next_layer.call}'\n    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE\n    SET_PAUSE_NEXT_LAYER ENABLE=0\n  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\n    RESPOND TYPE=echo MSG='{\"%s, forced by pause_at_layer [%d]\" % (pause_at_layer.call, pause_at_layer.layer)}'\n    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE\n    SET_PAUSE_AT_LAYER ENABLE=0\n  {% endif %}\n  SET_PRINT_STATS_INFO_BASE {rawparams}\n                    #magic___^_^___line\n##### internal use #####\n[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]\ndescription: Helper: park toolhead used in PAUSE and CANCEL_PRINT\ngcode:\n  ##### get user parameters or use default #####\n  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n  {% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}\n  {% set custom_park_x  = client.custom_park_x|default(0.0) %}\n  {% set custom_park_y  = client.custom_park_y|default(0.0) %}\n  {% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n  {% set sp_hop         = client.speed_hop|default(15) * 60 %}\n  {% set sp_move        = client.speed_move|default(velocity) * 60 %}\n  ##### get config and toolhead values #####\n  {% set origin    = printer.gcode_move.homing_origin %}\n  {% set act       = printer.gcode_move.gcode_position %}\n  {% set max       = printer.toolhead.axis_maximum %}\n  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta\n  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']\n                else False %}\n  ##### define park position #####\n  {% set z_min = params.Z_MIN|default(0)|float %}\n  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n  {% set x_park = params.X       if params.X is defined\n            else custom_park_x  if use_custom\n            else 0.0            if round_bed\n            else (max.x - 5.0) %}\n  {% set y_park = params.Y       if params.Y is defined\n            else custom_park_y  if use_custom\n            else (max.y - 5.0)  if round_bed and z_park < cone\n            else 0.0            if round_bed\n            else (max.y - 5.0) %}\n  ##### end of definitions #####\n  _CLIENT_RETRACT\n  {% if \"xyz\" in printer.toolhead.homed_axes %}\n    G90\n    G1 Z{z_park} F{sp_hop}\n    G1 X{x_park} Y{y_park} F{sp_move}\n    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n  {% else %}\n    RESPOND TYPE=echo MSG='Printer not homed'\n  {% endif %}\n                    #magic___^_^___line\n[gcode_macro _CLIENT_EXTRUDE]\ndescription: Extrudes, if the extruder is hot enough\ngcode:\n  ##### get user parameters or use default #####\n  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n  {% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n  {% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n  {% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n  ##### end of definitions #####\n  {% if printer.toolhead.extruder != '' %}\n    {% if printer[printer.toolhead.extruder].can_extrude %}\n      {% if use_fw_retract %}\n        {% if length < 0 %}\n          G10\n        {% else %}\n          G11\n        {% endif %}\n      {% else %}\n        M83\n        G1 E{length} F{(speed|float|abs) * 60}\n        {% if absolute_extrude %}\n          M82\n        {% endif %}\n      {% endif %}\n    {% else %}\n      RESPOND TYPE=echo MSG='{\"\\\"%s\\\" not hot enough\" % printer.toolhead.extruder}'\n    {% endif %}\n  {% endif %}\n                    #magic___^_^___line\n[gcode_macro _CLIENT_RETRACT]\ndescription: Retracts, if the extruder is hot enough\ngcode:\n  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n  {% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n  {% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n                    #magic___^_^___line\n  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}\n"
